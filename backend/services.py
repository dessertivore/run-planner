from fastapi import FastAPI
from fastapi.testclient import TestClient
import httpx
from resources import (
    add_run,
    find_run_func,
    add_plan,
    find_plan_func,
    db_connection_check,
)
from datetime import datetime

app = FastAPI()
client = TestClient(app)

test_data = {"plan_num": 0, "week": 0, "day": 0}


@app.get("/healthcheck")
async def root() -> tuple:
    """
    Check database connection, responsiveness of endpoints.

    Returns:
        tuple: boolean showing if FastAPI endpoint for /runs is responding (as indicator
        for all endpoints), and if database is connected successfully. Number of seconds
        taken to run healthcheck code also shown.
    """
    # need to add some health checks here
    start_time = datetime.now()
    output = True
    response = client.get("/runs", params=test_data)
    if response.status_code != 200:
        output = False
    if not db_connection_check():
        output = False
    end_time = datetime.now()
    total = end_time - start_time
    return output, total


@app.post("/runs")
async def root(week: int, day: int, details: str):
    """
    Add runs to a plan.

    Args:
        week (int): week number.
        day (int): day number (Monday is 0).
        details (str): E.g. duration/distance/intensity of run.
    """
    add_run(week, day, details)


@app.get("/runs")
async def root(plan_num: int, week: int, day: int) -> list:
    """
    Search for runs.
    """
    runs = find_run_func(plan_num, week, day)
    return runs


@app.post("/plans")
async def root(plan_num: int, plan_name: str):
    """
    Add plans.

    Args:
        plan_num (int): ID number for plan. This can be autogenerated eventually.
        plan_name (str): Information on distance and duration of plan.
    """
    add_plan(plan_num, plan_name)


@app.get("/plans")
async def root(search_plan: int | str) -> list:
    """
    Search for a plan.

    Args:
        search_plan (int | str): Search either by name or ID.

    Returns:
        list: list of plans which match criteria.
    """
    if search_plan.isdigit():
        search_plan = int(search_plan)
    plan = find_plan_func(search_plan)
    return plan
